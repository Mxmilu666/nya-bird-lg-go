name: Build and Package

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: 'frontend/pnpm-lock.yaml'

      - name: Install frontend dependencies
        run: |
          cd frontend
          pnpm install

      - name: Remove .env file
        run: |
          cd frontend
          rm -f .env

      - name: Build frontend
        run: |
          cd frontend
          pnpm build

      - name: Upload frontend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist/

  build-backend:
    needs: build-frontend
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            binary: nya-bird-lg-go
            archive_ext: tar.gz
            archive_cmd: tar -czf

          - os: linux
            arch: arm64
            binary: nya-bird-lg-go
            archive_ext: tar.gz
            archive_cmd: tar -czf

          - os: linux
            arch: arm
            binary: nya-bird-lg-go
            archive_ext: tar.gz
            archive_cmd: tar -czf

          - os: windows
            arch: amd64
            binary: nya-bird-lg-go.exe
            archive_ext: zip
            archive_cmd: zip -r

          - os: darwin
            arch: amd64
            binary: nya-bird-lg-go
            archive_ext: tar.gz
            archive_cmd: tar -czf

          - os: darwin
            arch: arm64
            binary: nya-bird-lg-go
            archive_ext: tar.gz
            archive_cmd: tar -czf

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Download frontend artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: backend/frontend/dist

      - name: Build backend
        run: |
          cd backend
          go mod download
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -o ${{ matrix.binary }}
        env:
          CGO_ENABLED: 0

      - name: Prepare package
        run: |
          mkdir -p dist/${{ matrix.os }}-${{ matrix.arch }}
          cp backend/${{ matrix.binary }} dist/${{ matrix.os }}-${{ matrix.arch }}/${{ matrix.binary }}
          cp README.md dist/${{ matrix.os }}-${{ matrix.arch }}/
          
          # 创建配置样例
          cat > dist/${{ matrix.os }}-${{ matrix.arch }}/.env.sample << EOL
          # Server config
          BIRDLG_HOST=0.0.0.0
          BIRDLG_LISTEN=5000
          
          # Looking Glass config
          # Example: "Router1<router1>,Router2<router2>"
          BIRDLG_SERVERS=
          BIRDLG_DOMAIN=example.com
          BIRDLG_PROXY_PORT=8000
          BIRDLG_SSL=false
          BIRDLG_TIMEOUT=10
          EOL
          
          cd dist
          ${{ matrix.archive_cmd }} nya-bird-lg-go-${{ matrix.os }}-${{ matrix.arch }}.${{ matrix.archive_ext }} ${{ matrix.os }}-${{ matrix.arch }}/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nya-bird-lg-go-${{ matrix.os }}-${{ matrix.arch }}
          path: dist/nya-bird-lg-go-${{ matrix.os }}-${{ matrix.arch }}.${{ matrix.archive_ext }}

  package-all:
    needs: build-backend
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: nya-bird-lg-go-*
          exclude: frontend-dist

      - name: List downloaded files
        run: find artifacts -type f | sort

      - name: Prepare combined package
        run: |
          mkdir -p combined
          find artifacts -name "*.tar.gz" -o -name "*.zip" -type f -exec cp {} combined/ \;
          ls -la combined/

      - name: Upload combined artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nya-bird-lg-go-all-platforms
          path: combined/
          if-no-files-found: error